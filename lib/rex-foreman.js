// Generated by CoffeeScript 1.6.3
(function() {
  var Process, Rex, Rex_Foreman, config, cp, express, fs, handlers, http, io, log, optimist, os, pad, path, pkg, scli, util, _;

  cp = require("child_process");

  fs = require("fs");

  os = require("os");

  path = require("path");

  util = require("util");

  scli = require("rex-shell");

  _ = require("underscore");

  optimist = require("optimist");

  express = require("express");

  http = require("http");

  io = require("socket.io");

  pkg = require("../package.json");

  config = pkg.config;

  scli.config.appName("Rex-Foreman");

  Rex_Foreman = {};

  pad = function(str, width) {
    var len;
    len = str.length;
    while (len < width) {
      str += " ";
    }
    return str;
  };

  log = function() {
    return console.log.apply(console, arguments);
  };

  handlers = {
    app: {
      connect: function(socket) {},
      disconnect: function() {
        return scli("Socket Disconnected!");
      },
      boot: function() {
        scli("Booting Processes");
        return _.each(Rex_Foreman.procs, function(params, name) {
          if (params.active) {
            scli("Booting '" + name + "'");
            return Rex_Foreman.procs[name].process = new Process(params);
          } else {
            return scli("Skipping Inactive Process " + name);
          }
        });
      },
      exit: function() {}
    },
    master: {
      die: function() {},
      recover: function() {}
    },
    event: {
      exit: function() {},
      exception: function(err) {},
      sigterm: function() {},
      sigkill: function() {}
    }
  };

  Process = (function() {
    function Process(Params) {
      scli("Creating Process " + Params.name);
      this.name = Params.name;
      this.command = Params.command;
      this.args = Params.args;
      this.dir = Params.dir || process.cwd();
      this.pid = 0;
      this.worker = null;
      this.output = [];
      if (this.run()) {
        scli("Process " + this.name + " created");
      } else {
        scli.error("Process " + this.name + " failed :(");
      }
      this;
    }

    Process.prototype.setPrefix = function() {
      return this.prefix = pad("" + this.name + " ( " + this.pid + " )", 25) + " | ";
    };

    Process.prototype.run = function() {
      var proc, worker;
      proc = this;
      this.worker = worker = cp.spawn(this.command, this.args, {
        cwd: this.dir
      });
      this.worker.stdout.setEncoding('utf8');
      this.worker.stderr.setEncoding('utf8');
      this.worker.stdout.on("data", function(data) {
        scli("Process data received, sending to client " + proc.name, data);
        return Rex_Foreman.socket.emit("process:data", proc.name, data);
      });
      this.worker.stderr.on("data", function(data) {
        scli("Process data received, sending to client " + proc.name, data);
        return Rex_Foreman.socket.emit("process:data", proc.name, data);
      });
      this.worker.on("error", function(err) {
        scli.error("Process error in " + proc.name + ": " + err, proc.worker);
        return Rex_Foreman.socket.emit("process:error", proc.name, err);
      });
      this.worker.on("close", function(code, signal) {
        if (code) {
          scli("Closed Process: " + proc.name + " with code " + code + " and signal " + signal);
        }
        return Rex_Foreman.socket.emit("process:die", proc.name, code, signal);
      });
      process.on("exit", function() {
        scli.error("Parent process dying, killing " + proc.name);
        Rex_Foreman.socket.emit("process:die", proc.name);
        return proc.worker.kill("SIGTERM");
      });
      this.pid = this.worker.pid;
      return Rex_Foreman.socket.emit("process:start", proc.name, this.pid);
    };

    Process.prototype.onexception = function() {};

    Process.prototype.kill = function() {};

    return Process;

  })();

  Rex = (function() {
    function Rex(Params) {
      scli("Creating new Rex-Foreman instance");
      if (!Params) {
        Params = {};
      }
      this.platform = os.platform();
      this.is_mac = this.platform === "darwin";
      this.is_linux = this.platform === "linux";
      this.is_windows = this.platform === "win32";
      scli("Your platform: " + this.platform);
      this.ProcfilePath = Params.procfile || "./procfile";
      this.procfile = fs.readFileSync(this.ProcfilePath, {
        encoding: 'utf8'
      });
      this.parseProcfile();
      this.num_procs = _.size(this.procs);
      scli("Rex-Foreman will run " + this.num_procs + " processes", this.procs);
      scli("Configuring Rex-Foreman");
      this.configure();
      scli("Configured. Running Rex-Foreman");
      this.run();
      scli("Rex-Foreman running!");
      return this;
    }

    Rex.prototype.parseProcfile = function() {
      var err, parsedProcs, procfile, rex;
      scli("Parsing procfile...");
      rex = this;
      procfile = this.procfile.split("\n");
      parsedProcs = {};
      try {
        _.each(procfile, function(proc) {
          var active, args, command, fullCommand, name, parts;
          if (proc === "") {
            return;
          }
          parts = proc.split(":");
          args = [];
          active = true;
          if (parts.length >= 2) {
            name = parts[0].trim();
            fullCommand = proc.split(":").slice(1).join(":").trim().split(" ");
            command = fullCommand.shift();
            args = fullCommand;
          } else {
            if (!_.isString(parts)) {
              rex.die("Invalid Procfile");
            }
            command = parts;
          }
          if (name.charAt(0) === "#") {
            name = (name.substr(1)).trim();
            active = false;
          }
          return parsedProcs[name] = {
            name: name,
            command: command,
            active: active,
            args: args
          };
        });
        rex.procs = parsedProcs;
        scli("Procfile Parsed...");
        return this;
      } catch (_error) {
        err = _error;
        scli.error("Error parsing procfile: ");
        scli.error(err);
        process.exit(1);
        return scli("Proc: ", renderData);
      }
    };

    Rex.prototype.getConfig = function() {
      return {
        procs: this.procs,
        num_procs: this.num_procs,
        platform: this.platform,
        is_mac: this.is_mac,
        is_linux: this.is_linux,
        is_windows: this.is_windows
      };
    };

    Rex.prototype.configure = function() {
      var dirpath, indexpath;
      scli("Configuring Rex-Foreman");
      this.app = express();
      dirpath = path.resolve(__dirname, "../web");
      indexpath = path.resolve(__dirname, "../web/index.html");
      log("Dirpath/Indexpath", dirpath, indexpath);
      this.app.use(express["static"](dirpath));
      this.app.get("/", function(req, res) {
        return res.sendfile(indexpath);
      });
      return this.server = http.createServer(this.app);
    };

    Rex.prototype.die = function(Msg) {
      scli.error(Msg);
      return process.exit(1);
    };

    Rex.prototype.run = function() {
      scli("Running!");
      this.io = io.listen(this.server);
      this.server.listen(config.port);
      this.parseProcfile();
      return this.setupSockets();
    };

    Rex.prototype.setupSockets = function() {
      var rex;
      rex = this;
      this.io.sockets.on("connection", function(socket) {
        rex.socket = socket;
        scli("Socket Connected!", Rex_Foreman.getConfig());
        process.on("exit", function() {
          scli.error("Parent process dying");
          socket.emit("master:die", "DEATH");
          return rex.killAll();
        });
        process.on("SIGINT", function() {
          if (rex.readyToDie) {
            log("Suit yourself! Killing everything now!");
            rex.killAll();
            process.exit(0);
          } else {
            rex.readyToDie = true;
            log("Press Ctrl+C again to quit!");
          }
          return false;
        });
        process.on("SIGTERM", function() {
          log("SIGTERM Received!");
          rex.killAll();
          return process.exit(0);
        });
        process.on("uncaughtException", function(err) {
          log("Exception Caught: ", err, err.stack);
          return false;
        });
        socket.emit("connected", Rex_Foreman.getConfig());
        socket.on("disconnect", handlers.app.disconnect);
        return socket.on("app:boot", handlers.app.boot);
      });
      return this;
    };

    Rex.prototype.killAll = function() {
      log("Killing all processes");
      _.each(this.procs, function(proc) {
        if (proc.worker && typeof proc.worker.kill !== void 0) {
          scli("Killing process " + proc.name, proc.worker);
          return proc.worker.kill("SIGKILL");
        } else {
          return scli("Process " + proc.name + " already dead");
        }
      });
      return process.exit(0);
    };

    module.exports = {
      init: function() {
        return Rex_Foreman = new Rex();
      },
      version: function() {
        log("Version: " + pkg.version);
        return process.exit(0);
      }
    };

    return Rex;

  })();

}).call(this);
