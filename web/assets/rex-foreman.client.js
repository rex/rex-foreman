// Generated by CoffeeScript 1.6.3
(function() {
  var COLORS, RexProcess, RexProcessView, RexProcesses, RexSocket, error, handlers, log;

  Array.prototype.random = function() {
    return this[Math.floor(Math.random() * this.length)];
  };

  log = function() {
    return console.log.apply(console, arguments);
  };

  COLORS = ['green', 'red', 'blue', 'purple', 'teal'];

  error = function(Proc, Msg) {
    var tpl;
    tpl = Handlebars.compile($("#process_error").html());
    return $("#process_output_target").prepend(tpl({
      proc: Proc,
      message: Msg
    }));
  };

  RexProcessView = Backbone.View.extend({
    events: {},
    initialize: function() {
      this.visible = true;
      this.model.on("change:pid", this.updatePid, this);
      this.template = Handlebars.compile($("#process_item").html());
      this.model.set("fullCommand", "" + (this.model.get('command')) + " " + (this.model.get('args').join(" ")));
      return this;
    },
    render: function() {
      var name, rex, visible;
      rex = this;
      name = this.model.get('name');
      visible = this.visible;
      this.$el.html(this.template(this.model.toJSON()));
      this.$el.find(".ui.toggle.checkbox").checkbox({
        onEnable: function() {
          $("[data-rex-output][data-process=" + name + "]").show();
          return rex.visible = true;
        },
        onDisable: function() {
          $("[data-rex-output][data-process=" + name + "]").hide();
          return rex.visible = false;
        }
      });
      return this;
    },
    updatePid: function() {
      return this.$('div[data-pid]').text(this.model.get('pid'));
    }
  });

  RexProcess = Backbone.Model.extend({
    idAttribute: "name",
    template: function() {},
    defaults: {
      name: "",
      pid: "NOT RUNNING",
      command: "",
      args: [],
      active: false,
      scrollback: [],
      color: ""
    },
    initialize: function() {
      this.tpl_output = Handlebars.compile($("#process_output").html());
      return this.set("color", COLORS.random());
    },
    output: function(output) {
      return this.tpl_output({
        proc: this.toJSON(),
        output: output
      });
    }
  });

  RexProcesses = Backbone.Collection.extend({
    model: RexProcess,
    render: function() {
      this.each(function(model) {
        return $("#process_item_target").append(new RexProcessView({
          model: model
        }).render().el);
      });
      return this;
    }
  });

  handlers = {
    app: {
      connected: function(config) {
        var $target;
        window.RexSocket.config = config;
        window.RexSocket.procs = config.procs;
        $("#server_down").modal('hide');
        $target = $("#process_item_target");
        $target.empty();
        _.each(config.procs, function(proc) {
          return window.RexSocket.processes.add(new RexProcess(proc));
        });
        window.RexSocket.processes.render();
        return window.RexSocket.socket.emit("app:boot");
      },
      disconnected: function() {},
      boot: function() {},
      exit: function() {}
    },
    process: {
      start: function(name, pid) {
        window.RexSocket.processes.get(name).set('pid', pid);
        $("div[data-process-item=" + name + "]").addClass("active").removeClass("dimmed").find(".ui.toggle.checkbox").checkbox('enable');
        return $("div.item[data-process=" + name + "]").removeClass("dimmed");
      },
      data: function(name, output) {
        var proc;
        proc = window.RexSocket.procs[name];
        return $("#process_output_target").prepend(window.RexSocket.processes.get(name).output(output));
      },
      error: function(name, err) {},
      end: function(name, code) {},
      die: function(name, code, signal) {
        var proc;
        $("div[data-process-item=" + name + "]").removeClass("active").addClass("dimmed").find(".ui.toggle.checkbox").checkbox('disable');
        $("div.item[data-process=" + name + "]").addClass("dimmed");
        proc = window.RexSocket.processes.get(name);
        proc.set("pid", "NOT RUNNING");
        return error(proc.toJSON(), "Process " + name + " has died! You should try restarting the process with the toggle to your left or by restarting the server.");
      },
      recover: function() {}
    },
    master: {
      die: function(word) {
        return $("#server_down").modal('show', {
          closable: false
        });
      },
      recover: function() {}
    },
    event: {
      exit: function() {},
      exception: function(err) {},
      sigterm: function() {},
      sigkill: function() {}
    }
  };

  RexSocket = (function() {
    function RexSocket() {
      this.templates = {};
      this.processes = {};
    }

    RexSocket.prototype.init = function(SocketIOInstance) {
      this.io = SocketIOInstance;
      this.connect();
      return this;
    };

    RexSocket.prototype.connect = function() {
      this.socket = this.io.connect('http://localhost:3009');
      return this.setup();
    };

    RexSocket.prototype.setup = function() {
      this.processes = new RexProcesses;
      this.socket.on("connected", handlers.app.connected);
      this.socket.on("disconnect", handlers.app.disconnected);
      this.socket.on("process:start", handlers.process.start);
      this.socket.on("process:data", handlers.process.data);
      this.socket.on("process:error", handlers.process.error);
      this.socket.on("process:end", handlers.process.end);
      this.socket.on("process:die", handlers.process.die);
      this.socket.on("process:recover", handlers.process.recover);
      this.socket.on("master:die", handlers.master.die);
      this.socket.on("master:recover", handlers.master.recover);
      this.socket.on("event:exit", handlers.event.exit);
      this.socket.on("event:exception", handlers.event.exception);
      this.socket.on("event:sigterm", handlers.event.sigterm);
      return this.socket.on("event:sigkill", handlers.event.sigkill);
    };

    return RexSocket;

  })();

  window.RexSocket = new RexSocket;

}).call(this);
