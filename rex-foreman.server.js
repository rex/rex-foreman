// Generated by CoffeeScript 1.6.3
(function() {
  var Process, Rex, Rex_Foreman, config, cp, express, fs, http, io, optimist, os, path, pkg, scli, util, _;

  cp = require("child_process");

  fs = require("fs");

  os = require("os");

  path = require("path");

  util = require("util");

  scli = require("rex-shell");

  _ = require("underscore");

  optimist = require("optimist");

  express = require("express");

  http = require("http");

  io = require("socket.io");

  pkg = require("./package.json");

  config = pkg.config;

  _.mixin("pad", function(str, width) {
    var len;
    len = str.length;
    while (len < width) {
      str += " ";
    }
    return str;
  });

  Process = (function() {
    function Process(Params) {
      this.name = Params.name;
      this.command = Params.command;
      this.dir = Params.dir || __dirname;
      this.prefix = _.pad("" + this.name + " ( " + this.pid + " )", 25) + " | ";
      this.pid = 0;
      this.process = null;
      this.output = [];
    }

    Process.prototype.run = function() {};

    Process.prototype.onexception = function() {};

    Process.prototype.kill = function() {};

    return Process;

  })();

  Rex = (function() {
    function Rex(Params) {
      if (!Params) {
        Params = {};
      }
      this.ProcfilePath = Params.procfile || "./procfile";
      this.procfile = fs.readFileSync(this.ProcfilePath, {
        encoding: 'utf8'
      });
      this.procs = this.procfile.split("\n");
      this.num_procs = this.procs.length;
      this.platform = os.platform();
      this.is_mac = this.platform === "darwin";
      this.is_linux = this.platform === "linux";
      this.is_windows = this.platform === "win32";
      this.configure();
      this.run();
      return this;
    }

    Rex.prototype.configure = function() {
      scli("Configuring rex-foreman");
      this.app = express();
      this.app.use(express["static"](__dirname + "/web"));
      this.app.get("/", function(req, res) {
        return res.sendfile(__dirname(+"/web/index.html"));
      });
      return this.server = http.createServer(this.app);
    };

    Rex.prototype.run = function() {
      scli("Running!");
      this.io = io.listen(this.server);
      this.server.listen(config.port);
      return this.setupSockets();
    };

    Rex.prototype.setupSockets = function() {
      var rex;
      rex = this;
      this.io.sockets.on("connection", function(socket) {
        scli("Socket Connected!");
        socket.emit("config", {
          procs: rex.procs,
          count: rex.num_procs,
          platform: rex.platform,
          is_mac: rex.is_mac,
          is_linux: rex.is_linux,
          is_windows: rex.is_windows
        });
        socket.on("event", function(data) {
          return scli("Socket Event!", data);
        });
        return socket.on("disconnect", function() {
          return scli("Socket Disconnected!");
        });
      });
      return this;
    };

    return Rex;

  })();

  Rex_Foreman = new Rex();

}).call(this);
